// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var TypeHelpers = require("./TypeHelpers.bs.js");
var TransformHelpers = require("./TransformHelpers.bs.js");

var Types1 = /* module */[];

var migrate_Belt_MapString____t = TransformHelpers.migrate_Belt_MapString__t;

function migrate_Belt_SetString____t(_input_data) {
  return _input_data;
}

function migrate_Types____tag(_input_data) {
  return _input_data;
}

function migrate_Types____scene(_input_data) {
  var _converted_id = _input_data[/* id */0];
  var _converted_modified = _input_data[/* modified */1];
  var _converted_created = _input_data[/* created */2];
  var match = _input_data[/* title */3];
  var _converted_title = match !== undefined ? match : undefined;
  var _converted_tags = _input_data[/* tags */4];
  var _converted_children = $$Array.map((function (_item) {
          return _item;
        }), _input_data[/* children */5]);
  var match$1 = _input_data[/* parent */6];
  var _converted_parent = match$1 !== undefined ? match$1 : undefined;
  return /* record */[
          /* id */_converted_id,
          /* modified */_converted_modified,
          /* created */_converted_created,
          /* title */_converted_title,
          /* tags */_converted_tags,
          /* children */_converted_children,
          /* parent */_converted_parent,
          /* starred */false
        ];
}

function migrate_Types____directory(_input_data) {
  var _converted_scenes = TransformHelpers.migrate_Belt_MapString__t(migrate_Types____scene, _input_data[/* scenes */0]);
  var _converted_tags = TransformHelpers.migrate_Belt_MapString__t((function (arg) {
          return arg;
        }), _input_data[/* tags */1]);
  return /* record */[
          /* scenes */_converted_scenes,
          /* tags */_converted_tags
        ];
}

var Types2 = /* module */[
  /* migrate_Belt_MapString____t */migrate_Belt_MapString____t,
  /* migrate_Belt_SetString____t */migrate_Belt_SetString____t,
  /* migrate_Types____directory */migrate_Types____directory,
  /* migrate_Types____scene */migrate_Types____scene,
  /* migrate_Types____tag */migrate_Types____tag
];

var schemaPropertyName = "$schemaVersion";

var deserialize_Belt_SetString____t = TypeHelpers.deserialize_Belt_SetString____t;

function deserialize_Belt_MapString____t(valueTransformer) {
  return (function (param) {
      return TypeHelpers.deserialize_Belt_MapString____t(valueTransformer, param);
    });
}

function deserialize_Types____scene(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var dict = match[0];
    var inner = function (attr_parent) {
      var match = Js_dict.get(dict, "children");
      if (match !== undefined) {
        var transformer = function (string) {
          var match = Js_json.classify(string);
          if (typeof match === "number" || match.tag) {
            return /* Error */Block.__(1, [/* :: */[
                        "expected a string",
                        /* [] */0
                      ]]);
          } else {
            return /* Ok */Block.__(0, [match[0]]);
          }
        };
        var match$1 = Js_json.classify(Caml_option.valFromOption(match));
        var match$2;
        if (typeof match$1 === "number" || match$1.tag !== 3) {
          match$2 = /* Error */Block.__(1, [/* :: */[
                "expected an array",
                /* [] */0
              ]]);
        } else {
          var loop = function (_i, _collected, _items) {
            while(true) {
              var items = _items;
              var collected = _collected;
              var i = _i;
              if (items) {
                var match = transformer(items[0]);
                if (match.tag) {
                  return /* Error */Block.__(1, [/* :: */[
                              "list element " + String(i),
                              match[0]
                            ]]);
                } else {
                  _items = items[1];
                  _collected = /* :: */[
                    match[0],
                    collected
                  ];
                  _i = i + 1 | 0;
                  continue ;
                }
              } else {
                return /* Ok */Block.__(0, [Belt_List.reverse(collected)]);
              }
            };
          };
          var match$3 = loop(0, /* [] */0, Belt_List.fromArray(match$1[0]));
          match$2 = match$3.tag ? /* Error */Block.__(1, [match$3[0]]) : /* Ok */Block.__(0, [Belt_List.toArray(match$3[0])]);
        }
        if (match$2.tag) {
          return /* Error */Block.__(1, [/* :: */[
                      "attribute 'children'",
                      match$2[0]
                    ]]);
        } else {
          var attr_children = match$2[0];
          var match$4 = Js_dict.get(dict, "tags");
          if (match$4 !== undefined) {
            var match$5 = Curry._1(deserialize_Belt_SetString____t, Caml_option.valFromOption(match$4));
            if (match$5.tag) {
              return /* Error */Block.__(1, [/* :: */[
                          "attribute 'tags'",
                          match$5[0]
                        ]]);
            } else {
              var attr_tags = match$5[0];
              var inner$1 = function (attr_title) {
                var match = Js_dict.get(dict, "created");
                if (match !== undefined) {
                  var match$1 = Js_json.classify(Caml_option.valFromOption(match));
                  var match$2;
                  match$2 = typeof match$1 === "number" || match$1.tag !== 1 ? /* Error */Block.__(1, [/* :: */[
                          "Expected a float",
                          /* [] */0
                        ]]) : /* Ok */Block.__(0, [match$1[0]]);
                  if (match$2.tag) {
                    return /* Error */Block.__(1, [/* :: */[
                                "attribute 'created'",
                                match$2[0]
                              ]]);
                  } else {
                    var attr_created = match$2[0];
                    var match$3 = Js_dict.get(dict, "modified");
                    if (match$3 !== undefined) {
                      var match$4 = Js_json.classify(Caml_option.valFromOption(match$3));
                      var match$5;
                      match$5 = typeof match$4 === "number" || match$4.tag !== 1 ? /* Error */Block.__(1, [/* :: */[
                              "Expected a float",
                              /* [] */0
                            ]]) : /* Ok */Block.__(0, [match$4[0]]);
                      if (match$5.tag) {
                        return /* Error */Block.__(1, [/* :: */[
                                    "attribute 'modified'",
                                    match$5[0]
                                  ]]);
                      } else {
                        var attr_modified = match$5[0];
                        var match$6 = Js_dict.get(dict, "id");
                        if (match$6 !== undefined) {
                          var match$7 = Js_json.classify(Caml_option.valFromOption(match$6));
                          var match$8;
                          match$8 = typeof match$7 === "number" || match$7.tag ? /* Error */Block.__(1, [/* :: */[
                                  "expected a string",
                                  /* [] */0
                                ]]) : /* Ok */Block.__(0, [match$7[0]]);
                          if (match$8.tag) {
                            return /* Error */Block.__(1, [/* :: */[
                                        "attribute 'id'",
                                        match$8[0]
                                      ]]);
                          } else {
                            var attr_id = match$8[0];
                            return /* Ok */Block.__(0, [/* record */[
                                        /* id */attr_id,
                                        /* modified */attr_modified,
                                        /* created */attr_created,
                                        /* title */attr_title,
                                        /* tags */attr_tags,
                                        /* children */attr_children,
                                        /* parent */attr_parent
                                      ]]);
                          }
                        } else {
                          return /* Error */Block.__(1, [/* :: */[
                                      "No attribute 'id'",
                                      /* [] */0
                                    ]]);
                        }
                      }
                    } else {
                      return /* Error */Block.__(1, [/* :: */[
                                  "No attribute 'modified'",
                                  /* [] */0
                                ]]);
                    }
                  }
                } else {
                  return /* Error */Block.__(1, [/* :: */[
                              "No attribute 'created'",
                              /* [] */0
                            ]]);
                }
              };
              var match$6 = Js_dict.get(dict, "title");
              if (match$6 !== undefined) {
                var json = Caml_option.valFromOption(match$6);
                var transformer$1 = function (string) {
                  var match = Js_json.classify(string);
                  if (typeof match === "number" || match.tag) {
                    return /* Error */Block.__(1, [/* :: */[
                                "expected a string",
                                /* [] */0
                              ]]);
                  } else {
                    return /* Ok */Block.__(0, [match[0]]);
                  }
                };
                var match$7 = Js_json.classify(json);
                var match$8;
                var exit = 0;
                if (typeof match$7 === "number" && match$7 >= 2) {
                  match$8 = /* Ok */Block.__(0, [undefined]);
                } else {
                  exit = 1;
                }
                if (exit === 1) {
                  var match$9 = transformer$1(json);
                  match$8 = match$9.tag ? /* Error */Block.__(1, [/* :: */[
                          "optional value",
                          match$9[0]
                        ]]) : /* Ok */Block.__(0, [match$9[0]]);
                }
                if (match$8.tag) {
                  return /* Error */Block.__(1, [/* :: */[
                              "attribute 'title'",
                              match$8[0]
                            ]]);
                } else {
                  return inner$1(match$8[0]);
                }
              } else {
                return inner$1(undefined);
              }
            }
          } else {
            return /* Error */Block.__(1, [/* :: */[
                        "No attribute 'tags'",
                        /* [] */0
                      ]]);
          }
        }
      } else {
        return /* Error */Block.__(1, [/* :: */[
                    "No attribute 'children'",
                    /* [] */0
                  ]]);
      }
    };
    var match$1 = Js_dict.get(dict, "parent");
    if (match$1 !== undefined) {
      var json = Caml_option.valFromOption(match$1);
      var transformer = function (string) {
        var match = Js_json.classify(string);
        if (typeof match === "number" || match.tag) {
          return /* Error */Block.__(1, [/* :: */[
                      "expected a string",
                      /* [] */0
                    ]]);
        } else {
          return /* Ok */Block.__(0, [match[0]]);
        }
      };
      var match$2 = Js_json.classify(json);
      var match$3;
      var exit = 0;
      if (typeof match$2 === "number" && match$2 >= 2) {
        match$3 = /* Ok */Block.__(0, [undefined]);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        var match$4 = transformer(json);
        match$3 = match$4.tag ? /* Error */Block.__(1, [/* :: */[
                "optional value",
                match$4[0]
              ]]) : /* Ok */Block.__(0, [match$4[0]]);
      }
      if (match$3.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'parent'",
                    match$3[0]
                  ]]);
      } else {
        return inner(match$3[0]);
      }
    } else {
      return inner(undefined);
    }
  }
}

function deserialize_Types____tag(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "title");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      match$3 = typeof match$2 === "number" || match$2.tag ? /* Error */Block.__(1, [/* :: */[
              "expected a string",
              /* [] */0
            ]]) : /* Ok */Block.__(0, [match$2[0]]);
      if (match$3.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'title'",
                    match$3[0]
                  ]]);
      } else {
        var attr_title = match$3[0];
        var match$4 = Js_dict.get(dict, "color");
        if (match$4 !== undefined) {
          var match$5 = Js_json.classify(Caml_option.valFromOption(match$4));
          var match$6;
          match$6 = typeof match$5 === "number" || match$5.tag ? /* Error */Block.__(1, [/* :: */[
                  "expected a string",
                  /* [] */0
                ]]) : /* Ok */Block.__(0, [match$5[0]]);
          if (match$6.tag) {
            return /* Error */Block.__(1, [/* :: */[
                        "attribute 'color'",
                        match$6[0]
                      ]]);
          } else {
            var attr_color = match$6[0];
            var match$7 = Js_dict.get(dict, "id");
            if (match$7 !== undefined) {
              var match$8 = Js_json.classify(Caml_option.valFromOption(match$7));
              var match$9;
              match$9 = typeof match$8 === "number" || match$8.tag ? /* Error */Block.__(1, [/* :: */[
                      "expected a string",
                      /* [] */0
                    ]]) : /* Ok */Block.__(0, [match$8[0]]);
              if (match$9.tag) {
                return /* Error */Block.__(1, [/* :: */[
                            "attribute 'id'",
                            match$9[0]
                          ]]);
              } else {
                var attr_id = match$9[0];
                return /* Ok */Block.__(0, [/* record */[
                            /* id */attr_id,
                            /* color */attr_color,
                            /* title */attr_title
                          ]]);
              }
            } else {
              return /* Error */Block.__(1, [/* :: */[
                          "No attribute 'id'",
                          /* [] */0
                        ]]);
            }
          }
        } else {
          return /* Error */Block.__(1, [/* :: */[
                      "No attribute 'color'",
                      /* [] */0
                    ]]);
        }
      }
    } else {
      return /* Error */Block.__(1, [/* :: */[
                  "No attribute 'title'",
                  /* [] */0
                ]]);
    }
  }
}

function deserialize_Types____directory(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "tags");
    if (match$1 !== undefined) {
      var match$2 = TypeHelpers.deserialize_Belt_MapString____t(deserialize_Types____tag, Caml_option.valFromOption(match$1));
      if (match$2.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'tags'",
                    match$2[0]
                  ]]);
      } else {
        var attr_tags = match$2[0];
        var match$3 = Js_dict.get(dict, "scenes");
        if (match$3 !== undefined) {
          var match$4 = TypeHelpers.deserialize_Belt_MapString____t(deserialize_Types____scene, Caml_option.valFromOption(match$3));
          if (match$4.tag) {
            return /* Error */Block.__(1, [/* :: */[
                        "attribute 'scenes'",
                        match$4[0]
                      ]]);
          } else {
            return /* Ok */Block.__(0, [/* record */[
                        /* scenes */match$4[0],
                        /* tags */attr_tags
                      ]]);
          }
        } else {
          return /* Error */Block.__(1, [/* :: */[
                      "No attribute 'scenes'",
                      /* [] */0
                    ]]);
        }
      }
    } else {
      return /* Error */Block.__(1, [/* :: */[
                  "No attribute 'tags'",
                  /* [] */0
                ]]);
    }
  }
}

var Version1 = /* module */[
  /* deserialize_Belt_MapString____t */deserialize_Belt_MapString____t,
  /* deserialize_Belt_SetString____t */deserialize_Belt_SetString____t,
  /* deserialize_Types____directory */deserialize_Types____directory,
  /* deserialize_Types____scene */deserialize_Types____scene,
  /* deserialize_Types____tag */deserialize_Types____tag
];

var serialize_Belt_SetString____t = TypeHelpers.serialize_Belt_SetString____t;

var deserialize_Belt_SetString____t$1 = deserialize_Belt_SetString____t;

var deserialize_Belt_MapString____t$1 = deserialize_Belt_MapString____t;

function serialize_Types____scene(record) {
  var param = record[/* title */3];
  var array = record[/* children */5];
  var transformer = function (prim) {
    return prim;
  };
  var param$1 = record[/* parent */6];
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "id",
                record[/* id */0]
              ],
              /* tuple */[
                "modified",
                record[/* modified */1]
              ],
              /* tuple */[
                "created",
                record[/* created */2]
              ],
              /* tuple */[
                "title",
                param !== undefined ? param : null
              ],
              /* tuple */[
                "tags",
                Curry._1(serialize_Belt_SetString____t, record[/* tags */4])
              ],
              /* tuple */[
                "children",
                Belt_Array.map(array, transformer)
              ],
              /* tuple */[
                "parent",
                param$1 !== undefined ? param$1 : null
              ],
              /* tuple */[
                "starred",
                record[/* starred */7]
              ]
            ]);
}

function serialize_Belt_MapString____t(valueTransformer) {
  return (function (param) {
      return TypeHelpers.serialize_Belt_MapString____t(valueTransformer, param);
    });
}

function serialize_Types____tag(record) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "id",
                record[/* id */0]
              ],
              /* tuple */[
                "color",
                record[/* color */1]
              ],
              /* tuple */[
                "title",
                record[/* title */2]
              ]
            ]);
}

var deserialize_Types____tag$1 = deserialize_Types____tag;

function deserialize_Types____scene$1(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "starred");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      var match$3;
      if (typeof match$2 === "number") {
        switch (match$2) {
          case 0 : 
              match$3 = /* Ok */Block.__(0, [false]);
              break;
          case 1 : 
              match$3 = /* Ok */Block.__(0, [true]);
              break;
          case 2 : 
              match$3 = /* Error */Block.__(1, [/* :: */[
                    "Expected a bool",
                    /* [] */0
                  ]]);
              break;
          
        }
      } else {
        match$3 = /* Error */Block.__(1, [/* :: */[
              "Expected a bool",
              /* [] */0
            ]]);
      }
      if (match$3.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'starred'",
                    match$3[0]
                  ]]);
      } else {
        var attr_starred = match$3[0];
        var inner = function (attr_parent) {
          var match = Js_dict.get(dict, "children");
          if (match !== undefined) {
            var transformer = function (string) {
              var match = Js_json.classify(string);
              if (typeof match === "number" || match.tag) {
                return /* Error */Block.__(1, [/* :: */[
                            "expected a string",
                            /* [] */0
                          ]]);
              } else {
                return /* Ok */Block.__(0, [match[0]]);
              }
            };
            var match$1 = Js_json.classify(Caml_option.valFromOption(match));
            var match$2;
            if (typeof match$1 === "number" || match$1.tag !== 3) {
              match$2 = /* Error */Block.__(1, [/* :: */[
                    "expected an array",
                    /* [] */0
                  ]]);
            } else {
              var loop = function (_i, _collected, _items) {
                while(true) {
                  var items = _items;
                  var collected = _collected;
                  var i = _i;
                  if (items) {
                    var match = transformer(items[0]);
                    if (match.tag) {
                      return /* Error */Block.__(1, [/* :: */[
                                  "list element " + String(i),
                                  match[0]
                                ]]);
                    } else {
                      _items = items[1];
                      _collected = /* :: */[
                        match[0],
                        collected
                      ];
                      _i = i + 1 | 0;
                      continue ;
                    }
                  } else {
                    return /* Ok */Block.__(0, [Belt_List.reverse(collected)]);
                  }
                };
              };
              var match$3 = loop(0, /* [] */0, Belt_List.fromArray(match$1[0]));
              match$2 = match$3.tag ? /* Error */Block.__(1, [match$3[0]]) : /* Ok */Block.__(0, [Belt_List.toArray(match$3[0])]);
            }
            if (match$2.tag) {
              return /* Error */Block.__(1, [/* :: */[
                          "attribute 'children'",
                          match$2[0]
                        ]]);
            } else {
              var attr_children = match$2[0];
              var match$4 = Js_dict.get(dict, "tags");
              if (match$4 !== undefined) {
                var match$5 = Curry._1(deserialize_Belt_SetString____t$1, Caml_option.valFromOption(match$4));
                if (match$5.tag) {
                  return /* Error */Block.__(1, [/* :: */[
                              "attribute 'tags'",
                              match$5[0]
                            ]]);
                } else {
                  var attr_tags = match$5[0];
                  var inner$1 = function (attr_title) {
                    var match = Js_dict.get(dict, "created");
                    if (match !== undefined) {
                      var match$1 = Js_json.classify(Caml_option.valFromOption(match));
                      var match$2;
                      match$2 = typeof match$1 === "number" || match$1.tag !== 1 ? /* Error */Block.__(1, [/* :: */[
                              "Expected a float",
                              /* [] */0
                            ]]) : /* Ok */Block.__(0, [match$1[0]]);
                      if (match$2.tag) {
                        return /* Error */Block.__(1, [/* :: */[
                                    "attribute 'created'",
                                    match$2[0]
                                  ]]);
                      } else {
                        var attr_created = match$2[0];
                        var match$3 = Js_dict.get(dict, "modified");
                        if (match$3 !== undefined) {
                          var match$4 = Js_json.classify(Caml_option.valFromOption(match$3));
                          var match$5;
                          match$5 = typeof match$4 === "number" || match$4.tag !== 1 ? /* Error */Block.__(1, [/* :: */[
                                  "Expected a float",
                                  /* [] */0
                                ]]) : /* Ok */Block.__(0, [match$4[0]]);
                          if (match$5.tag) {
                            return /* Error */Block.__(1, [/* :: */[
                                        "attribute 'modified'",
                                        match$5[0]
                                      ]]);
                          } else {
                            var attr_modified = match$5[0];
                            var match$6 = Js_dict.get(dict, "id");
                            if (match$6 !== undefined) {
                              var match$7 = Js_json.classify(Caml_option.valFromOption(match$6));
                              var match$8;
                              match$8 = typeof match$7 === "number" || match$7.tag ? /* Error */Block.__(1, [/* :: */[
                                      "expected a string",
                                      /* [] */0
                                    ]]) : /* Ok */Block.__(0, [match$7[0]]);
                              if (match$8.tag) {
                                return /* Error */Block.__(1, [/* :: */[
                                            "attribute 'id'",
                                            match$8[0]
                                          ]]);
                              } else {
                                var attr_id = match$8[0];
                                return /* Ok */Block.__(0, [/* record */[
                                            /* id */attr_id,
                                            /* modified */attr_modified,
                                            /* created */attr_created,
                                            /* title */attr_title,
                                            /* tags */attr_tags,
                                            /* children */attr_children,
                                            /* parent */attr_parent,
                                            /* starred */attr_starred
                                          ]]);
                              }
                            } else {
                              return /* Error */Block.__(1, [/* :: */[
                                          "No attribute 'id'",
                                          /* [] */0
                                        ]]);
                            }
                          }
                        } else {
                          return /* Error */Block.__(1, [/* :: */[
                                      "No attribute 'modified'",
                                      /* [] */0
                                    ]]);
                        }
                      }
                    } else {
                      return /* Error */Block.__(1, [/* :: */[
                                  "No attribute 'created'",
                                  /* [] */0
                                ]]);
                    }
                  };
                  var match$6 = Js_dict.get(dict, "title");
                  if (match$6 !== undefined) {
                    var json = Caml_option.valFromOption(match$6);
                    var transformer$1 = function (string) {
                      var match = Js_json.classify(string);
                      if (typeof match === "number" || match.tag) {
                        return /* Error */Block.__(1, [/* :: */[
                                    "expected a string",
                                    /* [] */0
                                  ]]);
                      } else {
                        return /* Ok */Block.__(0, [match[0]]);
                      }
                    };
                    var match$7 = Js_json.classify(json);
                    var match$8;
                    var exit = 0;
                    if (typeof match$7 === "number" && match$7 >= 2) {
                      match$8 = /* Ok */Block.__(0, [undefined]);
                    } else {
                      exit = 1;
                    }
                    if (exit === 1) {
                      var match$9 = transformer$1(json);
                      match$8 = match$9.tag ? /* Error */Block.__(1, [/* :: */[
                              "optional value",
                              match$9[0]
                            ]]) : /* Ok */Block.__(0, [match$9[0]]);
                    }
                    if (match$8.tag) {
                      return /* Error */Block.__(1, [/* :: */[
                                  "attribute 'title'",
                                  match$8[0]
                                ]]);
                    } else {
                      return inner$1(match$8[0]);
                    }
                  } else {
                    return inner$1(undefined);
                  }
                }
              } else {
                return /* Error */Block.__(1, [/* :: */[
                            "No attribute 'tags'",
                            /* [] */0
                          ]]);
              }
            }
          } else {
            return /* Error */Block.__(1, [/* :: */[
                        "No attribute 'children'",
                        /* [] */0
                      ]]);
          }
        };
        var match$4 = Js_dict.get(dict, "parent");
        if (match$4 !== undefined) {
          var json = Caml_option.valFromOption(match$4);
          var transformer = function (string) {
            var match = Js_json.classify(string);
            if (typeof match === "number" || match.tag) {
              return /* Error */Block.__(1, [/* :: */[
                          "expected a string",
                          /* [] */0
                        ]]);
            } else {
              return /* Ok */Block.__(0, [match[0]]);
            }
          };
          var match$5 = Js_json.classify(json);
          var match$6;
          var exit = 0;
          if (typeof match$5 === "number" && match$5 >= 2) {
            match$6 = /* Ok */Block.__(0, [undefined]);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            var match$7 = transformer(json);
            match$6 = match$7.tag ? /* Error */Block.__(1, [/* :: */[
                    "optional value",
                    match$7[0]
                  ]]) : /* Ok */Block.__(0, [match$7[0]]);
          }
          if (match$6.tag) {
            return /* Error */Block.__(1, [/* :: */[
                        "attribute 'parent'",
                        match$6[0]
                      ]]);
          } else {
            return inner(match$6[0]);
          }
        } else {
          return inner(undefined);
        }
      }
    } else {
      return /* Error */Block.__(1, [/* :: */[
                  "No attribute 'starred'",
                  /* [] */0
                ]]);
    }
  }
}

function deserialize_Types____directory$1(record) {
  var match = Js_json.classify(record);
  if (typeof match === "number" || match.tag !== 2) {
    return /* Error */Block.__(1, [/* :: */[
                "Expected an object",
                /* [] */0
              ]]);
  } else {
    var dict = match[0];
    var match$1 = Js_dict.get(dict, "tags");
    if (match$1 !== undefined) {
      var match$2 = TypeHelpers.deserialize_Belt_MapString____t(deserialize_Types____tag$1, Caml_option.valFromOption(match$1));
      if (match$2.tag) {
        return /* Error */Block.__(1, [/* :: */[
                    "attribute 'tags'",
                    match$2[0]
                  ]]);
      } else {
        var attr_tags = match$2[0];
        var match$3 = Js_dict.get(dict, "scenes");
        if (match$3 !== undefined) {
          var match$4 = TypeHelpers.deserialize_Belt_MapString____t(deserialize_Types____scene$1, Caml_option.valFromOption(match$3));
          if (match$4.tag) {
            return /* Error */Block.__(1, [/* :: */[
                        "attribute 'scenes'",
                        match$4[0]
                      ]]);
          } else {
            return /* Ok */Block.__(0, [/* record */[
                        /* scenes */match$4[0],
                        /* tags */attr_tags
                      ]]);
          }
        } else {
          return /* Error */Block.__(1, [/* :: */[
                      "No attribute 'scenes'",
                      /* [] */0
                    ]]);
        }
      }
    } else {
      return /* Error */Block.__(1, [/* :: */[
                  "No attribute 'tags'",
                  /* [] */0
                ]]);
    }
  }
}

function serialize_Types____directory(record) {
  var param = record[/* scenes */0];
  var param$1 = record[/* tags */1];
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "scenes",
                TypeHelpers.serialize_Belt_MapString____t(serialize_Types____scene, param)
              ],
              /* tuple */[
                "tags",
                TypeHelpers.serialize_Belt_MapString____t(serialize_Types____tag, param$1)
              ]
            ]);
}

var Version2 = /* module */[
  /* deserialize_Belt_MapString____t */deserialize_Belt_MapString____t$1,
  /* deserialize_Belt_SetString____t */deserialize_Belt_SetString____t$1,
  /* deserialize_Types____directory */deserialize_Types____directory$1,
  /* deserialize_Types____scene */deserialize_Types____scene$1,
  /* deserialize_Types____tag */deserialize_Types____tag$1,
  /* serialize_Belt_MapString____t */serialize_Belt_MapString____t,
  /* serialize_Belt_SetString____t */serialize_Belt_SetString____t,
  /* serialize_Types____directory */serialize_Types____directory,
  /* serialize_Types____scene */serialize_Types____scene,
  /* serialize_Types____tag */serialize_Types____tag
];

function parseVersion(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number") {
    return /* Error */Block.__(1, ["Must have a schema version"]);
  } else {
    switch (match.tag | 0) {
      case 2 : 
          var match$1 = Js_dict.get(match[0], schemaPropertyName);
          if (match$1 !== undefined) {
            var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
            if (typeof match$2 === "number" || match$2.tag !== 1) {
              return /* Error */Block.__(1, ["Invalid $schemaVersion"]);
            } else {
              return /* Ok */Block.__(0, [/* tuple */[
                          match$2[0] | 0,
                          json
                        ]]);
            }
          } else {
            return /* Error */Block.__(1, ["No $schemaVersion present"]);
          }
      case 3 : 
          var match$3 = match[0];
          if (match$3.length !== 2) {
            return /* Error */Block.__(1, ["Must have a schema version"]);
          } else {
            var version = match$3[0];
            var payload = match$3[1];
            var match$4 = Js_json.classify(version);
            if (typeof match$4 === "number" || match$4.tag !== 1) {
              return /* Error */Block.__(1, ["Invalid wrapped version"]);
            } else {
              return /* Ok */Block.__(0, [/* tuple */[
                          match$4[0] | 0,
                          payload
                        ]]);
            }
          }
      default:
        return /* Error */Block.__(1, ["Must have a schema version"]);
    }
  }
}

function wrapWithVersion(version, payload) {
  var match = Js_json.classify(payload);
  if (typeof match === "number") {
    return /* array */[
            version,
            payload
          ];
  } else if (match.tag === 2) {
    var dict = match[0];
    dict[schemaPropertyName] = version;
    return dict;
  } else {
    return /* array */[
            version,
            payload
          ];
  }
}

function serializeDirectory(data) {
  return wrapWithVersion(2, serialize_Types____directory(data));
}

function deserializeDirectory(data) {
  var match = parseVersion(data);
  if (match.tag) {
    return /* Error */Block.__(1, [/* :: */[
                match[0],
                /* [] */0
              ]]);
  } else {
    var match$1 = match[0];
    var data$1 = match$1[1];
    var version = match$1[0];
    if (version !== 1) {
      if (version !== 2) {
        return /* Error */Block.__(1, [/* :: */[
                    "Unexpected version " + String(version),
                    /* [] */0
                  ]]);
      } else {
        var match$2 = deserialize_Types____directory$1(data$1);
        if (match$2.tag) {
          return /* Error */Block.__(1, [match$2[0]]);
        } else {
          return /* Ok */Block.__(0, [match$2[0]]);
        }
      }
    } else {
      var match$3 = deserialize_Types____directory(data$1);
      if (match$3.tag) {
        return /* Error */Block.__(1, [match$3[0]]);
      } else {
        var data$2 = migrate_Types____directory(match$3[0]);
        return /* Ok */Block.__(0, [data$2]);
      }
    }
  }
}

var Directory = /* module */[
  /* serialize */serializeDirectory,
  /* deserialize */deserializeDirectory
];

var Modules = /* module */[/* Directory */Directory];

var currentVersion = 2;

var Current = 0;

exports.Types1 = Types1;
exports.Types2 = Types2;
exports.currentVersion = currentVersion;
exports.schemaPropertyName = schemaPropertyName;
exports.Version1 = Version1;
exports.Version2 = Version2;
exports.Current = Current;
exports.parseVersion = parseVersion;
exports.wrapWithVersion = wrapWithVersion;
exports.serializeDirectory = serializeDirectory;
exports.deserializeDirectory = deserializeDirectory;
exports.Modules = Modules;
/* No side effect */
